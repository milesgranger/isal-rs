name: CI

on:
  pull_request:
  release:
    types:
      - released
      - prereleased

jobs:

  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # matches supported targets from tags in https://hub.docker.com/r/muslcc/x86_64/tags
        include:
          - arch: aarch64
            abi: musl
          - arch: x86_64
            abi: musl
          - arch: powerpc64le
            abi: gnu
          
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: System installs
        run: |
          sudo apt update
          sudo apt install -y gcc-multilib

      - name: Build ISA-L (aarch64, x86_64)
        if: ${{ !startsWith(matrix.arch, 'powerpc64le') }} 
        run: |
          docker run --rm -v $(pwd):/code muslcc/x86_64:${{ matrix.arch }}-linux-${{ matrix.abi }} sh -c "apk add make nasm && cd /code/isal-sys/isa-l && make install host_cpu=${{ matrix.arch }} prefix=./../install -f Makefile.unx CFLAGS_${{ matrix.arch }}=-fPIC LDFLAGS=-static"

      - name: Build ISA-L (powerpc64le)
        if: ${{ startsWith(matrix.arch, 'powerpc64le') }} 
        run: |
          sudo apt install -y gcc-10-powerpc64le-linux-gnu
          cd isal-sys/isa-l
          make install host_cpu=ppc64le prefix=./../install -f Makefile.unx CC=powerpc64le-linux-gnu-gcc-10 CFLAGS_ppc64le=-fPIC LDFLAGS=-static
          cd ../..

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true

      - name: Rust Build Caching
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.arch }}-linux-${{ matrix.abi }}

      - name: Install cross
        run: cargo install cross

      - name: Build
        run: cross build --target ${{ matrix.arch }}-unknown-linux-${{ matrix.abi }}
      
      - name: Test
        run: cross test --target ${{ matrix.arch }}-unknown-linux-${{ matrix.abi }}
